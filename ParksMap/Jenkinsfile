// Jenkinsfile for ParksMap
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    def projectDir = "ParksMap"
    def nexusUrl = "http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com"
    def sonarqubeUrl = "http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com"
    def apiUrl = "https://master.na39.openshift.opentlc.com"
    def devNamespace = "${GUID}-parks-dev"
    def prodNamespace = "${GUID}-parks-prod"
    def mvnCmd = "mvn -s ./nexus_settings.xml -f ${projectDir}/pom.xml"
    def parksmap="parksmap"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
 
    stage('Checkout Source') {
        git 'https://github.com/suejon/advanced-openshift-development-assignment'
    }

    def groupId = getGroupIdFromPom("${projectDir}/pom.xml")
    def artifactId = getArtifactIdFromPom("${projectDir}/pom.xml")
    def version = getVersionFromPom("${projectDir}/pom.xml")
    def devTag = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"

    stage('Build jar') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
    }
    
    stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
    }
    
    stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "mvn sonar:sonar -s ./nexus_settings.xml -Dsonar.host.url=${sonarqubeUrl} -f ${projectDir}/pom.xml"
    }
    
    stage("Publish to Nexus") {
        echo "Publish to Nexus"
        sh "mvn -s ./nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}/repository/releases -f ${projectDir}/pom.xml"
    }
    
    stage("Build and Tag Openshift Image") {
        echo "Building OpenShift container image ${parksmap}:${devTag}"
        sh "if [ ! -f ./parksmap-${version}.jar ]; then wget ${nexusUrl}/repository/releases/com/openshift/evg/roadshow/parksmap/${version}/parksmap-${version}.jar; fi"
        sh "oc start-build ${parksmap} --from-file=./parksmap-${version}.jar -n ${devNamespace}"
        openshiftVerifyBuild apiURL: apiUrl, bldCfg: parksmap, checkForTriggeredDeployments: 'false', namespace: devNamespace, verbose: 'false', waitTime: '600000'
        sh "rm ./parksmap-*.jar"
        // // to tag the image
        openshiftTag alias: 'false', apiURL: apiUrl, destStream: parksmap, destTag: devTag, destinationNamespace: devNamespace, namespace: devNamespace, srcStream: parksmap, srcTag: 'latest', verbose: 'false'
    }
    
    stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        sh "oc set image dc/${parksmap} ${parksmap}=docker-registry.default.svc:5000/${devNamespace}/${parksmap}:${devTag} -n ${devNamespace}"
        sh "oc delete configmap ${parksmap}-config --ignore-not-found=true -n ${devNamespace}"
        sh "oc create configmap ${parksmap}-config --from-file=configuration/application-users.properties --from-file=configuration/application-roles.properties --from-file=./configuration/${parksmap}.properties -n ${devNamespace}"

        openshiftDeploy apiURL: apiUrl, depCfg: "${parksmap}", namespace: devNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment apiURL: apiUrl, depCfg: "${parksmap}", namespace: devNamespace, replicaCount: '', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService apiURL: apiUrl, namespace: devNamespace, svcName: "${parksmap}", verbose: 'false'
    }
    
    stage('Integration Tests') {
        echo "Running Integration Tests"
        sleep 15

        echo "Get info"
        sh "curl -i -H 'Content-Length: 0' -X GET http://${parksmap}.${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/backends/list"
        sh "curl -i -H 'Content-Length: 0' -X GET http://${parksmap}.${GUID}-parks-dev.svc.cluster.local:8080/ws/backends/list"
        echo "Loading data"
        sh "curl -i -H Content-Length: 0 -X GET http://${parksmap}.${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/appname/"
        sh "curl -i -H Content-Length: 0 -X GET http://${parksmap}.${GUID}-parks-dev.svc.cluster.local:8080/ws/appname/"
    }
    
    stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${devNamespace}/${parksmap}:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/${parksmap}:${devTag}"
        openshiftTag alias: 'false', destStream: parksmap, destTag: prodTag, destinationNamespace: devNamespace, namespace: devNamespace, srcStream: parksmap, srcTag: devTag, verbose: 'false'
    }
    
    def destApp = "${parksmap}-green"
    def activeApp = ""
    
    stage('Blue/Green Production Deployment') {
        activeApp = sh(returnStdout: true, script: "oc get route ${parksmap} -n ${prodNamespace} -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "${parksmap}-green") {
            destApp = "${parksmap}-blue"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp

        // Update the Image on the Production Deployment Config
        sh "oc set image dc/${activeApp} ${activeApp}=docker-registry.default.svc:5000/${devNamespace}/${parksmap}:${prodTag} -n ${prodNamespace}"
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${devNamespace}/${parksmap}:${prodTag} -n ${prodNamespace}"

        // Update the Config Map which contains the users for the Parks application
        sh "oc delete configmap ${destApp}-config -n ${prodNamespace} --ignore-not-found=true"
        sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${prodNamespace}"

        // Deploy the active application.
        echo "Deploying " + activeApp
        openshiftDeploy depCfg: activeApp, namespace: prodNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: activeApp, namespace: prodNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'

        // Deploy the inactive application.
        echo "Deploying " + destApp
        openshiftDeploy depCfg: destApp, namespace: prodNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: destApp, namespace: prodNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'

        // verify active app - green
        openshiftVerifyService namespace: prodNamespace, svcName: activeApp, verbose: 'false'
    }
    
    stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}"
        input "Switch Production?"
        echo "Switching Production application to ${destApp}."
        sh "oc patch route ${parksmap} --patch=\'{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}\' -n ${prodNamespace}"
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
