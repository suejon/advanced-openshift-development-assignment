// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    def projectDir = "Nationalparks"
    def nexusUrl = "http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com"
    def sonarqubeUrl = "http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com"
    def apiUrl = "https://master.na39.openshift.opentlc.com"
    def devNamespace = "${GUID}-parks-dev"
    def prodNamespace = "${GUID}-parks-prod"
    def mvnCmd = "mvn -s ./nexus_settings.xml -f ${projectDir}/pom.xml"
    def nationalparks="nationalparks"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
 
    stage('Checkout Source') {
        git 'https://github.com/suejon/advanced-openshift-development-assignment'
    }

    def groupId = getGroupIdFromPom("${projectDir}/pom.xml")
    def artifactId = getArtifactIdFromPom("${projectDir}/pom.xml")
    def version = getVersionFromPom("${projectDir}/pom.xml")
    def devTag = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"

    stage('Build jar') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean package -Dmaven.test.skip=true"
    }
    
    stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
    }
    
    stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "mvn sonar:sonar -s ./nexus_settings.xml -Dsonar.host.url=${sonarqubeUrl} -f ${projectDir}/pom.xml"
    }
    
    stage("Publish to Nexus") {
        echo "Publish to Nexus"
        sh "mvn -s ./nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}/repository/releases -f ${projectDir}/pom.xml"
    }
    
    stage("Build and Tag Openshift Image") {
        echo "Building OpenShift container image ${nationalparks}:${devTag}"
        sh "if [ ! -f ./nationalparks-${version}.jar ]; then wget ${nexusUrl}/repository/releases/com/openshift/evg/roadshow/nationalparks/${version}/nationalparks-${version}.jar; fi"
        sh "oc start-build ${nationalparks} --from-file=./nationalparks-${version}.jar -n ${devNamespace}"
        openshiftVerifyBuild apiURL: apiUrl, bldCfg: nationalparks, checkForTriggeredDeployments: 'false', namespace: devNamespace, verbose: 'false', waitTime: '600000'
        sh "rm ./nationalparks-*.jar"
        // // to tag the image
        openshiftTag alias: 'false', apiURL: apiUrl, destStream: nationalparks, destTag: devTag, destinationNamespace: devNamespace, namespace: devNamespace, srcStream: nationalparks, srcTag: 'latest', verbose: 'false'
    }
    
    stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        sh "oc set image dc/${nationalparks} ${nationalparks}=docker-registry.default.svc:5000/${devNamespace}/${nationalparks}:${devTag} -n ${devNamespace}"
        sh "oc delete configmap ${nationalparks}-config --ignore-not-found=true -n ${devNamespace}"
        sh "oc create configmap ${nationalparks}-config --from-file=configuration/application-users.properties --from-file=configuration/application-roles.properties --from-literal='APPNAME=National Parks (Dev)' -n ${devNamespace}"
        sh "oc label svc ${nationalparks} type=parksmap-backend --overwrite -n ${devNamespace}"

        openshiftDeploy apiURL: apiUrl, depCfg: "${nationalparks}", namespace: devNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment apiURL: apiUrl, depCfg: "${nationalparks}", namespace: devNamespace, replicaCount: '', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService apiURL: apiUrl, namespace: devNamespace, svcName: "${nationalparks}", verbose: 'false'
    }
    
    stage('Integration Tests') {
        echo "Running Integration Tests"
        sleep 15

        echo "Get info"
        sh "curl -i -H 'Content-Leength: 0' -X GET http://${nationalparks}.${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/info/"
        sh "curl -i -H 'Content-Leength: 0' -X GET http://${nationalparks}.${GUID}-parks-dev.svc.cluster.local:8080/ws/info/"
        echo "Loading data"
        sh "curl -i -H Content-Length: 0 -X GET http://${nationalparks}.${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/data/load/"
        sh "curl -i -H Content-Length: 0 -X GET http://${nationalparks}.${GUID}-parks-dev.svc.cluster.local:8080/ws/data/load/"
    }
    
    stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${devNamespace}/${nationalparks}:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/${nationalparks}:${devTag}"
        openshiftTag alias: 'false', destStream: nationalparks, destTag: prodTag, destinationNamespace: devNamespace, namespace: devNamespace, srcStream: nationalparks, srcTag: devTag, verbose: 'false'
    }
    
    def destApp = "${nationalparks}-green"
    def activeApp = ""
    
    stage('Blue/Green Production Deployment') {
        activeApp = sh(returnStdout: true, script: "oc get route ${nationalparks} -n ${prodNamespace} -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "${nationalparks}-green") {
            destApp = "${nationalparks}-blue"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp

        // Update the Image on the Production Deployment Config
        sh "oc set image dc/${activeApp} ${activeApp}=docker-registry.default.svc:5000/${devNamespace}/${nationalparks}:${prodTag} -n ${prodNamespace}"
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${devNamespace}/${nationalparks}:${prodTag} -n ${prodNamespace}"
        

        // Update the Config Map which contains the users for the Tasks application
        sh "oc delete configmap ${destApp}-config -n ${prodNamespace} --ignore-not-found=true"
        if (destApp == "${nationalparks}-blue") {
            sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties --from-literal='APPNAME=National Parks (Blue)' -n ${prodNamespace}"    
        } else {
            sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties --from-literal='APPNAME=National Parks (Green)' -n ${prodNamespace}"
        }

        // label the green app as the backend (need to delete the service and recreate + label the blue to refresh the cache)
        sh "oc label svc ${nationalparks}-green type=parksmap-backend --overwrite -n ${prodNamespace}"

        // Deploy the active application.
        echo "Deploying " + activeApp
        openshiftDeploy depCfg: activeApp, namespace: prodNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: activeApp, namespace: prodNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'

        // Deploy the inactive application.
        echo "Deploying " + destApp
        openshiftDeploy depCfg: destApp, namespace: prodNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: destApp, namespace: prodNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'

        openshiftVerifyService namespace: prodNamespace, svcName: activeApp, verbose: 'false'
        openshiftVerifyService namespace: prodNamespace, svcName: destApp, verbose: 'false'
        
    }
    
    stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}"
        input "Switch Production?"
        echo "Switching Production application to ${destApp}."

        // recreate old service without label:type=parksmap-backend and move it to the destination app service to be discovered by parks-map
        sh "oc delete svc ${nationalparks}-green -n ${prodNamespace}"
        sh "oc create -f Infrastructure/templates/parks-prod/${nationalparks}-green-svc.yaml -n ${prodNamespace}"

        sh "oc label svc ${nationalparks}-blue type=parksmap-backend --overwrite -n ${prodNamespace}"
        sh "oc patch route ${nationalparks} --patch=\'{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}\' -n ${prodNamespace}"
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
